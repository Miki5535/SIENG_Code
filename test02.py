import cv2
import os

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô Binary
def string_to_binary(s):
    return ''.join(f"{byte:08b}" for byte in s.encode('utf-8'))

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏õ‡∏•‡∏á Binary ‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
def binary_to_string(b):
    byte_data = bytes(int(b[i:i+8], 2) for i in range(0, len(b), 8))
    return byte_data.decode('utf-8', errors='ignore')

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ã‡πà‡∏≠‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏ô‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠
def encode_message_in_video(input_video, output_video, message):
    # ‡πÄ‡∏û‡∏¥‡πà‡∏° End Marker
    binary_message = string_to_binary(message) + '1111111111111110'
    total_bits = len(binary_message)
    
    cap = cv2.VideoCapture(input_video)
    if not cap.isOpened():
        print("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏õ‡∏¥‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡∏ï‡πâ‡∏ô‡∏â‡∏ö‡∏±‡∏ö‡πÑ‡∏î‡πâ")
        return

    # ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤ properties
    width = int(cap.get(cv2.CAP_PROP_FRAME_WIDTH))
    height = int(cap.get(cv2.CAP_PROP_FRAME_HEIGHT))
    fps = cap.get(cv2.CAP_PROP_FPS) or 30

    # ‡∏õ‡∏£‡∏±‡∏ö‡πÉ‡∏´‡πâ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á-‡∏™‡∏π‡∏á‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏•‡∏Ç‡∏Ñ‡∏π‡πà (‡∏ö‡∏≤‡∏á Codec ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£)
    width = width if width % 2 == 0 else width + 1
    height = height if height % 2 == 0 else height + 1

    # ‡πÉ‡∏ä‡πâ codec FFV1 (lossless) ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏• .avi
    fourcc = cv2.VideoWriter_fourcc(*'FFV1')
    out = cv2.VideoWriter(output_video, fourcc, fps, (width, height))
    
    if not out.isOpened():
        print("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡∏Ç‡∏≤‡∏≠‡∏≠‡∏Å‡πÑ‡∏î‡πâ")
        cap.release()
        return

    message_idx = 0
    frame_count = 0

    while True:
        ret, frame = cap.read()
        if not ret:
            break
            
        if message_idx < total_bits:
            for i in range(frame.shape[0]):
                for j in range(frame.shape[1]):
                    if message_idx < total_bits:
                        # ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç LSB ‡∏Ç‡∏≠‡∏á red channel
                        frame[i, j, 0] = (frame[i, j, 0] & 0xFE) | int(binary_message[message_idx])
                        message_idx += 1
                    else:
                        break
                else:
                    continue
                break
        
        out.write(frame)
        frame_count += 1

    cap.release()
    out.release()
    print(f"‚úÖ ‡∏ã‡πà‡∏≠‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏•‡πâ‡∏ß: {message_idx}/{total_bits} ‡∏ö‡∏¥‡∏ï")
    print(f"üéûÔ∏è ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏ü‡∏£‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: {frame_count}")

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ñ‡∏≠‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≤‡∏Å‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠
def decode_message_from_video(encoded_video):
    cap = cv2.VideoCapture(encoded_video)
    if not cap.isOpened():
        print("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏õ‡∏¥‡∏î‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡∏ó‡∏µ‡πà‡∏ù‡∏±‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏î‡πâ")
        return ""

    binary_message = ""
    while True:
        ret, frame = cap.read()
        if not ret:
            break
            
        for i in range(frame.shape[0]):
            for j in range(frame.shape[1]):
                binary_message += str(frame[i, j, 0] & 1)
                if len(binary_message) >= 16 and binary_message[-16:] == '1111111111111110':
                    cap.release()
                    return binary_to_string(binary_message[:-16])
    
    cap.release()
    return binary_to_string(binary_message)

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å (‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÅ‡∏•‡πâ‡∏ß)
if __name__ == "__main__":
    # input_video = r'C:\Users\65011\Desktop\Segano\work00002\vdio\avi.avi'
    input_video = r'C:\Users\65011\Desktop\Segano\work00002\vdio\mm.mp4'
    output_video = r'C:\Users\65011\Desktop\Segano\work00002\vdio\mm_hidden.avi'
    message = "‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ã‡πà‡∏≠‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° ssdsad 15516"

    print("üì¶ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ã‡πà‡∏≠‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡∏á‡πÉ‡∏ô‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠...")
    encode_message_in_video(input_video, output_video, message)

    print("üîç ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ñ‡∏≠‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ã‡πà‡∏≠‡∏ô...")
    extracted = decode_message_from_video(output_video)
    print(f"üì§ ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ñ‡∏≠‡∏î‡πÑ‡∏î‡πâ: {extracted}")

    if extracted == message:
        print("‚úÖ ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á 100%")
    else:
        print("‚ùå ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö")