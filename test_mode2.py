import docx
import msoffcrypto
from cryptography.hazmat.primitives import serialization, hashes
from cryptography.hazmat.primitives.asymmetric import padding, rsa
import base64
import subprocess
import json
import os

# --- ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏•‡∏∞‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå ---
docx_filename = "secret.docx"
protected_docx = "protected.docx"
decrypted_docx = "unlocked_secret.docx"

video_input = r"C:\Users\65011\Desktop\Segano\work00002\vdio\mm.mp4"
video_output = r"C:\Users\65011\Desktop\Segano\work00002\vdio\output_with_metadata.mp4"
metadata_key = "comment"

private_key_file = "private_key.pem"  # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å private key ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ñ‡∏≠‡∏î‡∏£‡∏´‡∏±‡∏™
text_to_write = "‡∏ô‡∏µ‡πà‡∏Ñ‡∏∑‡∏≠‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡∏±‡∏ö‡∏™‡∏∏‡∏î‡∏¢‡∏≠‡∏î üö®"


def encrypt_and_embed():
    print("[üöÄ] ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™‡πÅ‡∏•‡∏∞‡∏ã‡πà‡∏≠‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...\n")

    # ===== 1. ‡∏™‡∏£‡πâ‡∏≤‡∏á .docx ‡πÅ‡∏•‡∏∞‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° =====
    doc = docx.Document()
    doc.add_paragraph(text_to_write)
    doc.save(docx_filename)
    print(f"[+] ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå {docx_filename} ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢")

    # ===== 2. ‡πÉ‡∏™‡πà‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏´‡πâ .docx ‡∏î‡πâ‡∏ß‡∏¢ msoffcrypto =====
    docx_password = "Mikkee"
    with open(docx_filename, "rb") as f_in:
        with open(protected_docx, "wb") as f_out:
            office_file = msoffcrypto.OfficeFile(f_in)
            office_file.encrypt(docx_password, f_out)
    print(f"[+] ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡πÑ‡∏ü‡∏•‡πå‡∏î‡πâ‡∏ß‡∏¢‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß ‚Üí {protected_docx}")

    # ===== 3. ‡∏™‡∏£‡πâ‡∏≤‡∏á RSA key ‡πÅ‡∏•‡∏∞‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô =====
    private_key = rsa.generate_private_key(public_exponent=65537, key_size=2048)
    public_key = private_key.public_key()

    # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å private key ‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡∏†‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏á
    with open(private_key_file, "wb") as key_file:
        key_file.write(
            private_key.private_bytes(
                encoding=serialization.Encoding.PEM,
                format=serialization.PrivateFormat.PKCS8,
                encryption_algorithm=serialization.NoEncryption()
            )
        )
    print(f"[+] ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å private key ‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå ‚Üí {private_key_file}")

    encrypted_password = public_key.encrypt(
        docx_password.encode(),
        padding.OAEP(
            mgf=padding.MGF1(algorithm=hashes.SHA256()),
            algorithm=hashes.SHA256(),
            label=None
        )
    )
    encoded_encrypted_password = base64.b64encode(encrypted_password).decode()
    print(f"[+] ‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏ñ‡∏π‡∏Å‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™‡∏î‡πâ‡∏ß‡∏¢ RSA ‡πÅ‡∏•‡πâ‡∏ß (base64):\n{encoded_encrypted_password}")

    # ===== 4. ‡∏ù‡∏±‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏ô metadata ‡∏Ç‡∏≠‡∏á‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠ =====
    try:
        subprocess.run([
            "ffmpeg", "-i", video_input,
            "-metadata", f"{metadata_key}={encoded_encrypted_password}",
            "-codec", "copy", video_output
        ], check=True)
        print(f"[+] ‡∏ù‡∏±‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™‡∏•‡∏á‡πÉ‡∏ô metadata ‡∏Ç‡∏≠‡∏á‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡πÅ‡∏•‡πâ‡∏ß ‚Üí {video_output}")
    except subprocess.CalledProcessError as e:
        print(f"[-] ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Ç‡∏ì‡∏∞‡∏£‡∏±‡∏ô ffmpeg: {e}")
        exit(1)
    except FileNotFoundError:
        print("[-] ‡πÑ‡∏°‡πà‡∏û‡∏ö ffmpeg ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏•‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏•‡∏á PATH")
        exit(1)

    # ===== ‡∏•‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß =====
    if os.path.exists(docx_filename):
        os.remove(docx_filename)
        print(f"[üóëÔ∏è] ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß: {docx_filename}")


def decrypt_and_extract():
    print("[üîì] ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏ñ‡∏≠‡∏î‡∏£‡∏´‡∏±‡∏™‡πÅ‡∏•‡∏∞‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...\n")

    # ===== 1. ‡∏î‡∏∂‡∏á metadata ‡∏à‡∏≤‡∏Å‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠ =====
    try:
        result = subprocess.run([
            "ffprobe", "-v", "quiet", "-print_format", "json", "-show_format", video_output
        ], capture_output=True, text=True, check=True)
        metadata = json.loads(result.stdout)
        encoded_encrypted_password = metadata['format']['tags'][metadata_key]
        print(f"[+] ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å metadata ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {encoded_encrypted_password}")
    except subprocess.CalledProcessError as e:
        print(f"[-] ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Ç‡∏ì‡∏∞‡∏£‡∏±‡∏ô ffprobe: {e}")
        exit(1)
    except KeyError:
        print(f"[-] ‡πÑ‡∏°‡πà‡∏û‡∏ö metadata ‡∏ó‡∏µ‡πà‡∏ä‡∏∑‡πà‡∏≠ '{metadata_key}' ‡πÉ‡∏ô‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠")
        exit(1)
    except FileNotFoundError:
        print("[-] ‡πÑ‡∏°‡πà‡∏û‡∏ö ffprobe ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á ffmpeg ‡πÅ‡∏•‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏•‡∏á PATH")
        exit(1)

    # ===== 2. ‡∏≠‡πà‡∏≤‡∏ô private key ‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå =====
    if not os.path.exists(private_key_file):
        print(f"[-] ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå private key: {private_key_file}")
        print("[-] ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡πÇ‡∏´‡∏°‡∏î‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™‡∏Å‡πà‡∏≠‡∏ô ‡∏´‡∏£‡∏∑‡∏≠‡∏ß‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå private key ‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")
        exit(1)

    with open(private_key_file, "rb") as key_file:
        private_key = serialization.load_pem_private_key(
            key_file.read(),
            password=None
        )

    # ===== 3. ‡∏ñ‡∏≠‡∏î‡∏£‡∏´‡∏±‡∏™‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô =====
    try:
        encrypted_password = base64.b64decode(encoded_encrypted_password)
        decrypted_password = private_key.decrypt(
            encrypted_password,
            padding.OAEP(
                mgf=padding.MGF1(algorithm=hashes.SHA256()),
                algorithm=hashes.SHA256(),
                label=None
            )
        )
        docx_password = decrypted_password.decode()
        print(f"[+] ‡∏ñ‡∏≠‡∏î‡∏£‡∏´‡∏±‡∏™‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {docx_password}")
    except Exception as e:
        print(f"[-] ‡∏ñ‡∏≠‡∏î‡∏£‡∏´‡∏±‡∏™‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {e}")
        exit(1)

    # ===== 4. ‡∏ñ‡∏≠‡∏î‡∏£‡∏´‡∏±‡∏™ protected.docx =====
    if not os.path.exists(protected_docx):
        print(f"[-] ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå: {protected_docx}")
        exit(1)

    try:
        with open(protected_docx, "rb") as f_in:
            with open(decrypted_docx, "wb") as f_out:
                office_file = msoffcrypto.OfficeFile(f_in)
                office_file.load_key(password=docx_password)
                office_file.decrypt(f_out)  # <-- ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÑ‡∏ü‡∏•‡πå‡∏ñ‡∏≠‡∏î‡∏£‡∏´‡∏±‡∏™‡∏•‡∏á f_out ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
        print(f"[+] ‡∏ñ‡∏≠‡∏î‡∏£‡∏´‡∏±‡∏™‡πÑ‡∏ü‡∏•‡πå protected.docx ‡πÅ‡∏•‡πâ‡∏ß‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á ‚Üí {decrypted_docx}")

        # ‡∏≠‡πà‡∏≤‡∏ô‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤
        doc = docx.Document(decrypted_docx)
        content = "\n".join([p.text for p in doc.paragraphs])
        print(f"[üìú] ‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå: {content}")

    except Exception as e:
        print(f"[-] ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏õ‡∏¥‡∏î‡πÑ‡∏ü‡∏•‡πå protected.docx ‡πÑ‡∏î‡πâ: {e}")
        exit(1)



# ============ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏° ============
if __name__ == "__main__":
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ private key ‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
    if os.path.exists(private_key_file):
        print("[‚ÑπÔ∏è] ‡∏û‡∏ö‡∏£‡∏´‡∏±‡∏™ private key ‚Üí ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡πÇ‡∏´‡∏°‡∏î‡∏ñ‡∏≠‡∏î‡∏£‡∏´‡∏±‡∏™")
        decrypt_and_extract()
    else:
        print("[‚ÑπÔ∏è] ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏´‡∏±‡∏™ private key ‚Üí ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡πÇ‡∏´‡∏°‡∏î‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™")
        encrypt_and_embed()